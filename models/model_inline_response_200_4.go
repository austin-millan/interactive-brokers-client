/*
 * Client Portal Web API
 *
 * Production version of the Client Portal Web API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse2004 struct for InlineResponse2004
type InlineResponse2004 struct {
	// Email option is enabled or not 0-off, 1-on.
	M *int32 `json:"M,omitempty"`
	E *[]InlineResponse2004E `json:"E,omitempty"`
}

// NewInlineResponse2004 instantiates a new InlineResponse2004 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2004() *InlineResponse2004 {
	this := InlineResponse2004{}
	return &this
}

// NewInlineResponse2004WithDefaults instantiates a new InlineResponse2004 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2004WithDefaults() *InlineResponse2004 {
	this := InlineResponse2004{}
	return &this
}

// GetM returns the M field value if set, zero value otherwise.
func (o *InlineResponse2004) GetM() int32 {
	if o == nil || o.M == nil {
		var ret int32
		return ret
	}
	return *o.M
}

// GetMOk returns a tuple with the M field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetMOk() (*int32, bool) {
	if o == nil || o.M == nil {
		return nil, false
	}
	return o.M, true
}

// HasM returns a boolean if a field has been set.
func (o *InlineResponse2004) HasM() bool {
	if o != nil && o.M != nil {
		return true
	}

	return false
}

// SetM gets a reference to the given int32 and assigns it to the M field.
func (o *InlineResponse2004) SetM(v int32) {
	o.M = &v
}

// GetE returns the E field value if set, zero value otherwise.
func (o *InlineResponse2004) GetE() []InlineResponse2004E {
	if o == nil || o.E == nil {
		var ret []InlineResponse2004E
		return ret
	}
	return *o.E
}

// GetEOk returns a tuple with the E field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetEOk() (*[]InlineResponse2004E, bool) {
	if o == nil || o.E == nil {
		return nil, false
	}
	return o.E, true
}

// HasE returns a boolean if a field has been set.
func (o *InlineResponse2004) HasE() bool {
	if o != nil && o.E != nil {
		return true
	}

	return false
}

// SetE gets a reference to the given []InlineResponse2004E and assigns it to the E field.
func (o *InlineResponse2004) SetE(v []InlineResponse2004E) {
	o.E = &v
}

func (o InlineResponse2004) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.M != nil {
		toSerialize["M"] = o.M
	}
	if o.E != nil {
		toSerialize["E"] = o.E
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2004 struct {
	value *InlineResponse2004
	isSet bool
}

func (v NullableInlineResponse2004) Get() *InlineResponse2004 {
	return v.value
}

func (v *NullableInlineResponse2004) Set(val *InlineResponse2004) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2004) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2004) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2004(val *InlineResponse2004) *NullableInlineResponse2004 {
	return &NullableInlineResponse2004{value: val, isSet: true}
}

func (v NullableInlineResponse2004) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2004) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


