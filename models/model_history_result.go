/*
 * Client Portal Web API
 *
 * Production version of the Client Portal Web API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// HistoryResult struct for HistoryResult
type HistoryResult struct {
	Bars *HistoryResultBars `json:"bars,omitempty"`
}

// NewHistoryResult instantiates a new HistoryResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryResult() *HistoryResult {
	this := HistoryResult{}
	return &this
}

// NewHistoryResultWithDefaults instantiates a new HistoryResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryResultWithDefaults() *HistoryResult {
	this := HistoryResult{}
	return &this
}

// GetBars returns the Bars field value if set, zero value otherwise.
func (o *HistoryResult) GetBars() HistoryResultBars {
	if o == nil || o.Bars == nil {
		var ret HistoryResultBars
		return ret
	}
	return *o.Bars
}

// GetBarsOk returns a tuple with the Bars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryResult) GetBarsOk() (*HistoryResultBars, bool) {
	if o == nil || o.Bars == nil {
		return nil, false
	}
	return o.Bars, true
}

// HasBars returns a boolean if a field has been set.
func (o *HistoryResult) HasBars() bool {
	if o != nil && o.Bars != nil {
		return true
	}

	return false
}

// SetBars gets a reference to the given HistoryResultBars and assigns it to the Bars field.
func (o *HistoryResult) SetBars(v HistoryResultBars) {
	o.Bars = &v
}

func (o HistoryResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Bars != nil {
		toSerialize["bars"] = o.Bars
	}
	return json.Marshal(toSerialize)
}

type NullableHistoryResult struct {
	value *HistoryResult
	isSet bool
}

func (v NullableHistoryResult) Get() *HistoryResult {
	return v.value
}

func (v *NullableHistoryResult) Set(val *HistoryResult) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryResult) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryResult(val *HistoryResult) *NullableHistoryResult {
	return &NullableHistoryResult{value: val, isSet: true}
}

func (v NullableHistoryResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


