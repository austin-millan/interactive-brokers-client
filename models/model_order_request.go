/*
 * Client Portal Web API
 *
 * Production version of the Client Portal Web API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OrderRequest struct for OrderRequest
type OrderRequest struct {
	// acctId is optional. It should be one of the accounts returned by /iserver/accounts. If not passed, the first one in the list is selected. 
	AcctId *string `json:"acctId,omitempty"`
	// conid is the identifier of the security you want to trade, you can find the conid with /iserver/secdef/search. 
	Conid *int32 `json:"conid,omitempty"`
	// conid:type for example 265598:STK
	SecType *string `json:"secType,omitempty"`
	// Customer Order ID. An arbitraty string that can be used to identify the order, e.g \"my-fb-order\". The value must be unique for a 24h span. Please do not set this value for child orders when placing a bracket order. 
	COID *string `json:"cOID,omitempty"`
	// When placing bracket orders, the child parentId must be equal to the cOId (customer order id) of the parent. 
	ParentId *string `json:"parentId,omitempty"`
	// orderType can be one of MKT (Market), LMT (Limit), STP (Stop) or STP_LIMIT (stop limit) 
	OrderType *string `json:"orderType,omitempty"`
	// listingExchange is optional. By default we use \"SMART\" routing. Possible values are available via this end point: /v1/portal/iserver/contract/{{conid}}/info, see valid_exchange: e.g: SMART,AMEX,NYSE, CBOE,ISE,CHX,ARCA,ISLAND,DRCTEDGE,BEX,BATS,EDGEA,CSFBALGO,JE FFALGO,BYX,IEX,FOXRIVER,TPLUS1,NYSENAT,PSX 
	ListingExchange *string `json:"listingExchange,omitempty"`
	// set to true if the order can be executed outside regular trading hours. 
	OutsideRTH *bool `json:"outsideRTH,omitempty"`
	// optional if order is MKT, for LMT, this is the limit price. For STP this is the stop price. 
	Price *float32 `json:"price,omitempty"`
	// SELL or BUY
	Side *string `json:"side,omitempty"`
	// 
	Ticker *string `json:"ticker,omitempty"`
	// GTC (Good Till Cancel) or DAY. DAY orders are automatically cancelled at the end of the Day or Trading hours. 
	Tif *string `json:"tif,omitempty"`
	// for example QuickTrade
	Referrer *string `json:"referrer,omitempty"`
	// usually integer, for some special cases can be float numbers
	Quantity *float32 `json:"quantity,omitempty"`
	// If true, the system will use the Adaptive Algo to submit the order https://www.interactivebrokers.com/en/index.php?f=19091 
	UseAdaptive *bool `json:"useAdaptive,omitempty"`
}

// NewOrderRequest instantiates a new OrderRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderRequest() *OrderRequest {
	this := OrderRequest{}
	return &this
}

// NewOrderRequestWithDefaults instantiates a new OrderRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderRequestWithDefaults() *OrderRequest {
	this := OrderRequest{}
	return &this
}

// GetAcctId returns the AcctId field value if set, zero value otherwise.
func (o *OrderRequest) GetAcctId() string {
	if o == nil || o.AcctId == nil {
		var ret string
		return ret
	}
	return *o.AcctId
}

// GetAcctIdOk returns a tuple with the AcctId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetAcctIdOk() (*string, bool) {
	if o == nil || o.AcctId == nil {
		return nil, false
	}
	return o.AcctId, true
}

// HasAcctId returns a boolean if a field has been set.
func (o *OrderRequest) HasAcctId() bool {
	if o != nil && o.AcctId != nil {
		return true
	}

	return false
}

// SetAcctId gets a reference to the given string and assigns it to the AcctId field.
func (o *OrderRequest) SetAcctId(v string) {
	o.AcctId = &v
}

// GetConid returns the Conid field value if set, zero value otherwise.
func (o *OrderRequest) GetConid() int32 {
	if o == nil || o.Conid == nil {
		var ret int32
		return ret
	}
	return *o.Conid
}

// GetConidOk returns a tuple with the Conid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetConidOk() (*int32, bool) {
	if o == nil || o.Conid == nil {
		return nil, false
	}
	return o.Conid, true
}

// HasConid returns a boolean if a field has been set.
func (o *OrderRequest) HasConid() bool {
	if o != nil && o.Conid != nil {
		return true
	}

	return false
}

// SetConid gets a reference to the given int32 and assigns it to the Conid field.
func (o *OrderRequest) SetConid(v int32) {
	o.Conid = &v
}

// GetSecType returns the SecType field value if set, zero value otherwise.
func (o *OrderRequest) GetSecType() string {
	if o == nil || o.SecType == nil {
		var ret string
		return ret
	}
	return *o.SecType
}

// GetSecTypeOk returns a tuple with the SecType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetSecTypeOk() (*string, bool) {
	if o == nil || o.SecType == nil {
		return nil, false
	}
	return o.SecType, true
}

// HasSecType returns a boolean if a field has been set.
func (o *OrderRequest) HasSecType() bool {
	if o != nil && o.SecType != nil {
		return true
	}

	return false
}

// SetSecType gets a reference to the given string and assigns it to the SecType field.
func (o *OrderRequest) SetSecType(v string) {
	o.SecType = &v
}

// GetCOID returns the COID field value if set, zero value otherwise.
func (o *OrderRequest) GetCOID() string {
	if o == nil || o.COID == nil {
		var ret string
		return ret
	}
	return *o.COID
}

// GetCOIDOk returns a tuple with the COID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetCOIDOk() (*string, bool) {
	if o == nil || o.COID == nil {
		return nil, false
	}
	return o.COID, true
}

// HasCOID returns a boolean if a field has been set.
func (o *OrderRequest) HasCOID() bool {
	if o != nil && o.COID != nil {
		return true
	}

	return false
}

// SetCOID gets a reference to the given string and assigns it to the COID field.
func (o *OrderRequest) SetCOID(v string) {
	o.COID = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *OrderRequest) GetParentId() string {
	if o == nil || o.ParentId == nil {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetParentIdOk() (*string, bool) {
	if o == nil || o.ParentId == nil {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *OrderRequest) HasParentId() bool {
	if o != nil && o.ParentId != nil {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *OrderRequest) SetParentId(v string) {
	o.ParentId = &v
}

// GetOrderType returns the OrderType field value if set, zero value otherwise.
func (o *OrderRequest) GetOrderType() string {
	if o == nil || o.OrderType == nil {
		var ret string
		return ret
	}
	return *o.OrderType
}

// GetOrderTypeOk returns a tuple with the OrderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetOrderTypeOk() (*string, bool) {
	if o == nil || o.OrderType == nil {
		return nil, false
	}
	return o.OrderType, true
}

// HasOrderType returns a boolean if a field has been set.
func (o *OrderRequest) HasOrderType() bool {
	if o != nil && o.OrderType != nil {
		return true
	}

	return false
}

// SetOrderType gets a reference to the given string and assigns it to the OrderType field.
func (o *OrderRequest) SetOrderType(v string) {
	o.OrderType = &v
}

// GetListingExchange returns the ListingExchange field value if set, zero value otherwise.
func (o *OrderRequest) GetListingExchange() string {
	if o == nil || o.ListingExchange == nil {
		var ret string
		return ret
	}
	return *o.ListingExchange
}

// GetListingExchangeOk returns a tuple with the ListingExchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetListingExchangeOk() (*string, bool) {
	if o == nil || o.ListingExchange == nil {
		return nil, false
	}
	return o.ListingExchange, true
}

// HasListingExchange returns a boolean if a field has been set.
func (o *OrderRequest) HasListingExchange() bool {
	if o != nil && o.ListingExchange != nil {
		return true
	}

	return false
}

// SetListingExchange gets a reference to the given string and assigns it to the ListingExchange field.
func (o *OrderRequest) SetListingExchange(v string) {
	o.ListingExchange = &v
}

// GetOutsideRTH returns the OutsideRTH field value if set, zero value otherwise.
func (o *OrderRequest) GetOutsideRTH() bool {
	if o == nil || o.OutsideRTH == nil {
		var ret bool
		return ret
	}
	return *o.OutsideRTH
}

// GetOutsideRTHOk returns a tuple with the OutsideRTH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetOutsideRTHOk() (*bool, bool) {
	if o == nil || o.OutsideRTH == nil {
		return nil, false
	}
	return o.OutsideRTH, true
}

// HasOutsideRTH returns a boolean if a field has been set.
func (o *OrderRequest) HasOutsideRTH() bool {
	if o != nil && o.OutsideRTH != nil {
		return true
	}

	return false
}

// SetOutsideRTH gets a reference to the given bool and assigns it to the OutsideRTH field.
func (o *OrderRequest) SetOutsideRTH(v bool) {
	o.OutsideRTH = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *OrderRequest) GetPrice() float32 {
	if o == nil || o.Price == nil {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetPriceOk() (*float32, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *OrderRequest) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *OrderRequest) SetPrice(v float32) {
	o.Price = &v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *OrderRequest) GetSide() string {
	if o == nil || o.Side == nil {
		var ret string
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetSideOk() (*string, bool) {
	if o == nil || o.Side == nil {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *OrderRequest) HasSide() bool {
	if o != nil && o.Side != nil {
		return true
	}

	return false
}

// SetSide gets a reference to the given string and assigns it to the Side field.
func (o *OrderRequest) SetSide(v string) {
	o.Side = &v
}

// GetTicker returns the Ticker field value if set, zero value otherwise.
func (o *OrderRequest) GetTicker() string {
	if o == nil || o.Ticker == nil {
		var ret string
		return ret
	}
	return *o.Ticker
}

// GetTickerOk returns a tuple with the Ticker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetTickerOk() (*string, bool) {
	if o == nil || o.Ticker == nil {
		return nil, false
	}
	return o.Ticker, true
}

// HasTicker returns a boolean if a field has been set.
func (o *OrderRequest) HasTicker() bool {
	if o != nil && o.Ticker != nil {
		return true
	}

	return false
}

// SetTicker gets a reference to the given string and assigns it to the Ticker field.
func (o *OrderRequest) SetTicker(v string) {
	o.Ticker = &v
}

// GetTif returns the Tif field value if set, zero value otherwise.
func (o *OrderRequest) GetTif() string {
	if o == nil || o.Tif == nil {
		var ret string
		return ret
	}
	return *o.Tif
}

// GetTifOk returns a tuple with the Tif field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetTifOk() (*string, bool) {
	if o == nil || o.Tif == nil {
		return nil, false
	}
	return o.Tif, true
}

// HasTif returns a boolean if a field has been set.
func (o *OrderRequest) HasTif() bool {
	if o != nil && o.Tif != nil {
		return true
	}

	return false
}

// SetTif gets a reference to the given string and assigns it to the Tif field.
func (o *OrderRequest) SetTif(v string) {
	o.Tif = &v
}

// GetReferrer returns the Referrer field value if set, zero value otherwise.
func (o *OrderRequest) GetReferrer() string {
	if o == nil || o.Referrer == nil {
		var ret string
		return ret
	}
	return *o.Referrer
}

// GetReferrerOk returns a tuple with the Referrer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetReferrerOk() (*string, bool) {
	if o == nil || o.Referrer == nil {
		return nil, false
	}
	return o.Referrer, true
}

// HasReferrer returns a boolean if a field has been set.
func (o *OrderRequest) HasReferrer() bool {
	if o != nil && o.Referrer != nil {
		return true
	}

	return false
}

// SetReferrer gets a reference to the given string and assigns it to the Referrer field.
func (o *OrderRequest) SetReferrer(v string) {
	o.Referrer = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *OrderRequest) GetQuantity() float32 {
	if o == nil || o.Quantity == nil {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetQuantityOk() (*float32, bool) {
	if o == nil || o.Quantity == nil {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *OrderRequest) HasQuantity() bool {
	if o != nil && o.Quantity != nil {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *OrderRequest) SetQuantity(v float32) {
	o.Quantity = &v
}

// GetUseAdaptive returns the UseAdaptive field value if set, zero value otherwise.
func (o *OrderRequest) GetUseAdaptive() bool {
	if o == nil || o.UseAdaptive == nil {
		var ret bool
		return ret
	}
	return *o.UseAdaptive
}

// GetUseAdaptiveOk returns a tuple with the UseAdaptive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetUseAdaptiveOk() (*bool, bool) {
	if o == nil || o.UseAdaptive == nil {
		return nil, false
	}
	return o.UseAdaptive, true
}

// HasUseAdaptive returns a boolean if a field has been set.
func (o *OrderRequest) HasUseAdaptive() bool {
	if o != nil && o.UseAdaptive != nil {
		return true
	}

	return false
}

// SetUseAdaptive gets a reference to the given bool and assigns it to the UseAdaptive field.
func (o *OrderRequest) SetUseAdaptive(v bool) {
	o.UseAdaptive = &v
}

func (o OrderRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AcctId != nil {
		toSerialize["acctId"] = o.AcctId
	}
	if o.Conid != nil {
		toSerialize["conid"] = o.Conid
	}
	if o.SecType != nil {
		toSerialize["secType"] = o.SecType
	}
	if o.COID != nil {
		toSerialize["cOID"] = o.COID
	}
	if o.ParentId != nil {
		toSerialize["parentId"] = o.ParentId
	}
	if o.OrderType != nil {
		toSerialize["orderType"] = o.OrderType
	}
	if o.ListingExchange != nil {
		toSerialize["listingExchange"] = o.ListingExchange
	}
	if o.OutsideRTH != nil {
		toSerialize["outsideRTH"] = o.OutsideRTH
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.Side != nil {
		toSerialize["side"] = o.Side
	}
	if o.Ticker != nil {
		toSerialize["ticker"] = o.Ticker
	}
	if o.Tif != nil {
		toSerialize["tif"] = o.Tif
	}
	if o.Referrer != nil {
		toSerialize["referrer"] = o.Referrer
	}
	if o.Quantity != nil {
		toSerialize["quantity"] = o.Quantity
	}
	if o.UseAdaptive != nil {
		toSerialize["useAdaptive"] = o.UseAdaptive
	}
	return json.Marshal(toSerialize)
}

type NullableOrderRequest struct {
	value *OrderRequest
	isSet bool
}

func (v NullableOrderRequest) Get() *OrderRequest {
	return v.value
}

func (v *NullableOrderRequest) Set(val *OrderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderRequest(val *OrderRequest) *NullableOrderRequest {
	return &NullableOrderRequest{value: val, isSet: true}
}

func (v NullableOrderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


