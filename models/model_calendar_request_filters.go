/*
 * Client Portal Web API
 *
 * Production version of the Client Portal Web API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CalendarRequestFilters struct for CalendarRequestFilters
type CalendarRequestFilters struct {
	// value can be 'true' or 'false'.
	RecentlyHeld *string `json:"recently_held,omitempty"`
	// value can be 'true' or 'false'.
	CorporateEarnings *string `json:"corporate_earnings,omitempty"`
	// value can be 'true' or 'false'.
	DivExDates *string `json:"DivExDates,omitempty"`
	// value can be 'true' or 'false'.
	Ipo *string `json:"ipo,omitempty"`
	// value can be 'true' or 'false'.
	Splits *string `json:"splits,omitempty"`
	// value can be 'true' or 'false'.
	CorporateEvents *string `json:"corporate_events,omitempty"`
	// value can be 'true' or 'false'.
	EconomicEvents *string `json:"economic_events,omitempty"`
	// value can be 'true' or 'false'.
	OptionShowMonthly *string `json:"option_show_monthly,omitempty"`
	// value can be 'true' or 'false'.
	OptionShowWeekly *string `json:"option_show_weekly,omitempty"`
	// default is 'All'.
	Country *string `json:"country,omitempty"`
	// default is '250'.
	Limit *string `json:"limit,omitempty"`
	// default is '50'.
	LimitRegion *string `json:"limit_region,omitempty"`
}

// NewCalendarRequestFilters instantiates a new CalendarRequestFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalendarRequestFilters() *CalendarRequestFilters {
	this := CalendarRequestFilters{}
	return &this
}

// NewCalendarRequestFiltersWithDefaults instantiates a new CalendarRequestFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalendarRequestFiltersWithDefaults() *CalendarRequestFilters {
	this := CalendarRequestFilters{}
	return &this
}

// GetRecentlyHeld returns the RecentlyHeld field value if set, zero value otherwise.
func (o *CalendarRequestFilters) GetRecentlyHeld() string {
	if o == nil || o.RecentlyHeld == nil {
		var ret string
		return ret
	}
	return *o.RecentlyHeld
}

// GetRecentlyHeldOk returns a tuple with the RecentlyHeld field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarRequestFilters) GetRecentlyHeldOk() (*string, bool) {
	if o == nil || o.RecentlyHeld == nil {
		return nil, false
	}
	return o.RecentlyHeld, true
}

// HasRecentlyHeld returns a boolean if a field has been set.
func (o *CalendarRequestFilters) HasRecentlyHeld() bool {
	if o != nil && o.RecentlyHeld != nil {
		return true
	}

	return false
}

// SetRecentlyHeld gets a reference to the given string and assigns it to the RecentlyHeld field.
func (o *CalendarRequestFilters) SetRecentlyHeld(v string) {
	o.RecentlyHeld = &v
}

// GetCorporateEarnings returns the CorporateEarnings field value if set, zero value otherwise.
func (o *CalendarRequestFilters) GetCorporateEarnings() string {
	if o == nil || o.CorporateEarnings == nil {
		var ret string
		return ret
	}
	return *o.CorporateEarnings
}

// GetCorporateEarningsOk returns a tuple with the CorporateEarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarRequestFilters) GetCorporateEarningsOk() (*string, bool) {
	if o == nil || o.CorporateEarnings == nil {
		return nil, false
	}
	return o.CorporateEarnings, true
}

// HasCorporateEarnings returns a boolean if a field has been set.
func (o *CalendarRequestFilters) HasCorporateEarnings() bool {
	if o != nil && o.CorporateEarnings != nil {
		return true
	}

	return false
}

// SetCorporateEarnings gets a reference to the given string and assigns it to the CorporateEarnings field.
func (o *CalendarRequestFilters) SetCorporateEarnings(v string) {
	o.CorporateEarnings = &v
}

// GetDivExDates returns the DivExDates field value if set, zero value otherwise.
func (o *CalendarRequestFilters) GetDivExDates() string {
	if o == nil || o.DivExDates == nil {
		var ret string
		return ret
	}
	return *o.DivExDates
}

// GetDivExDatesOk returns a tuple with the DivExDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarRequestFilters) GetDivExDatesOk() (*string, bool) {
	if o == nil || o.DivExDates == nil {
		return nil, false
	}
	return o.DivExDates, true
}

// HasDivExDates returns a boolean if a field has been set.
func (o *CalendarRequestFilters) HasDivExDates() bool {
	if o != nil && o.DivExDates != nil {
		return true
	}

	return false
}

// SetDivExDates gets a reference to the given string and assigns it to the DivExDates field.
func (o *CalendarRequestFilters) SetDivExDates(v string) {
	o.DivExDates = &v
}

// GetIpo returns the Ipo field value if set, zero value otherwise.
func (o *CalendarRequestFilters) GetIpo() string {
	if o == nil || o.Ipo == nil {
		var ret string
		return ret
	}
	return *o.Ipo
}

// GetIpoOk returns a tuple with the Ipo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarRequestFilters) GetIpoOk() (*string, bool) {
	if o == nil || o.Ipo == nil {
		return nil, false
	}
	return o.Ipo, true
}

// HasIpo returns a boolean if a field has been set.
func (o *CalendarRequestFilters) HasIpo() bool {
	if o != nil && o.Ipo != nil {
		return true
	}

	return false
}

// SetIpo gets a reference to the given string and assigns it to the Ipo field.
func (o *CalendarRequestFilters) SetIpo(v string) {
	o.Ipo = &v
}

// GetSplits returns the Splits field value if set, zero value otherwise.
func (o *CalendarRequestFilters) GetSplits() string {
	if o == nil || o.Splits == nil {
		var ret string
		return ret
	}
	return *o.Splits
}

// GetSplitsOk returns a tuple with the Splits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarRequestFilters) GetSplitsOk() (*string, bool) {
	if o == nil || o.Splits == nil {
		return nil, false
	}
	return o.Splits, true
}

// HasSplits returns a boolean if a field has been set.
func (o *CalendarRequestFilters) HasSplits() bool {
	if o != nil && o.Splits != nil {
		return true
	}

	return false
}

// SetSplits gets a reference to the given string and assigns it to the Splits field.
func (o *CalendarRequestFilters) SetSplits(v string) {
	o.Splits = &v
}

// GetCorporateEvents returns the CorporateEvents field value if set, zero value otherwise.
func (o *CalendarRequestFilters) GetCorporateEvents() string {
	if o == nil || o.CorporateEvents == nil {
		var ret string
		return ret
	}
	return *o.CorporateEvents
}

// GetCorporateEventsOk returns a tuple with the CorporateEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarRequestFilters) GetCorporateEventsOk() (*string, bool) {
	if o == nil || o.CorporateEvents == nil {
		return nil, false
	}
	return o.CorporateEvents, true
}

// HasCorporateEvents returns a boolean if a field has been set.
func (o *CalendarRequestFilters) HasCorporateEvents() bool {
	if o != nil && o.CorporateEvents != nil {
		return true
	}

	return false
}

// SetCorporateEvents gets a reference to the given string and assigns it to the CorporateEvents field.
func (o *CalendarRequestFilters) SetCorporateEvents(v string) {
	o.CorporateEvents = &v
}

// GetEconomicEvents returns the EconomicEvents field value if set, zero value otherwise.
func (o *CalendarRequestFilters) GetEconomicEvents() string {
	if o == nil || o.EconomicEvents == nil {
		var ret string
		return ret
	}
	return *o.EconomicEvents
}

// GetEconomicEventsOk returns a tuple with the EconomicEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarRequestFilters) GetEconomicEventsOk() (*string, bool) {
	if o == nil || o.EconomicEvents == nil {
		return nil, false
	}
	return o.EconomicEvents, true
}

// HasEconomicEvents returns a boolean if a field has been set.
func (o *CalendarRequestFilters) HasEconomicEvents() bool {
	if o != nil && o.EconomicEvents != nil {
		return true
	}

	return false
}

// SetEconomicEvents gets a reference to the given string and assigns it to the EconomicEvents field.
func (o *CalendarRequestFilters) SetEconomicEvents(v string) {
	o.EconomicEvents = &v
}

// GetOptionShowMonthly returns the OptionShowMonthly field value if set, zero value otherwise.
func (o *CalendarRequestFilters) GetOptionShowMonthly() string {
	if o == nil || o.OptionShowMonthly == nil {
		var ret string
		return ret
	}
	return *o.OptionShowMonthly
}

// GetOptionShowMonthlyOk returns a tuple with the OptionShowMonthly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarRequestFilters) GetOptionShowMonthlyOk() (*string, bool) {
	if o == nil || o.OptionShowMonthly == nil {
		return nil, false
	}
	return o.OptionShowMonthly, true
}

// HasOptionShowMonthly returns a boolean if a field has been set.
func (o *CalendarRequestFilters) HasOptionShowMonthly() bool {
	if o != nil && o.OptionShowMonthly != nil {
		return true
	}

	return false
}

// SetOptionShowMonthly gets a reference to the given string and assigns it to the OptionShowMonthly field.
func (o *CalendarRequestFilters) SetOptionShowMonthly(v string) {
	o.OptionShowMonthly = &v
}

// GetOptionShowWeekly returns the OptionShowWeekly field value if set, zero value otherwise.
func (o *CalendarRequestFilters) GetOptionShowWeekly() string {
	if o == nil || o.OptionShowWeekly == nil {
		var ret string
		return ret
	}
	return *o.OptionShowWeekly
}

// GetOptionShowWeeklyOk returns a tuple with the OptionShowWeekly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarRequestFilters) GetOptionShowWeeklyOk() (*string, bool) {
	if o == nil || o.OptionShowWeekly == nil {
		return nil, false
	}
	return o.OptionShowWeekly, true
}

// HasOptionShowWeekly returns a boolean if a field has been set.
func (o *CalendarRequestFilters) HasOptionShowWeekly() bool {
	if o != nil && o.OptionShowWeekly != nil {
		return true
	}

	return false
}

// SetOptionShowWeekly gets a reference to the given string and assigns it to the OptionShowWeekly field.
func (o *CalendarRequestFilters) SetOptionShowWeekly(v string) {
	o.OptionShowWeekly = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *CalendarRequestFilters) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarRequestFilters) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *CalendarRequestFilters) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *CalendarRequestFilters) SetCountry(v string) {
	o.Country = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *CalendarRequestFilters) GetLimit() string {
	if o == nil || o.Limit == nil {
		var ret string
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarRequestFilters) GetLimitOk() (*string, bool) {
	if o == nil || o.Limit == nil {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *CalendarRequestFilters) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

// SetLimit gets a reference to the given string and assigns it to the Limit field.
func (o *CalendarRequestFilters) SetLimit(v string) {
	o.Limit = &v
}

// GetLimitRegion returns the LimitRegion field value if set, zero value otherwise.
func (o *CalendarRequestFilters) GetLimitRegion() string {
	if o == nil || o.LimitRegion == nil {
		var ret string
		return ret
	}
	return *o.LimitRegion
}

// GetLimitRegionOk returns a tuple with the LimitRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarRequestFilters) GetLimitRegionOk() (*string, bool) {
	if o == nil || o.LimitRegion == nil {
		return nil, false
	}
	return o.LimitRegion, true
}

// HasLimitRegion returns a boolean if a field has been set.
func (o *CalendarRequestFilters) HasLimitRegion() bool {
	if o != nil && o.LimitRegion != nil {
		return true
	}

	return false
}

// SetLimitRegion gets a reference to the given string and assigns it to the LimitRegion field.
func (o *CalendarRequestFilters) SetLimitRegion(v string) {
	o.LimitRegion = &v
}

func (o CalendarRequestFilters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RecentlyHeld != nil {
		toSerialize["recently_held"] = o.RecentlyHeld
	}
	if o.CorporateEarnings != nil {
		toSerialize["corporate_earnings"] = o.CorporateEarnings
	}
	if o.DivExDates != nil {
		toSerialize["DivExDates"] = o.DivExDates
	}
	if o.Ipo != nil {
		toSerialize["ipo"] = o.Ipo
	}
	if o.Splits != nil {
		toSerialize["splits"] = o.Splits
	}
	if o.CorporateEvents != nil {
		toSerialize["corporate_events"] = o.CorporateEvents
	}
	if o.EconomicEvents != nil {
		toSerialize["economic_events"] = o.EconomicEvents
	}
	if o.OptionShowMonthly != nil {
		toSerialize["option_show_monthly"] = o.OptionShowMonthly
	}
	if o.OptionShowWeekly != nil {
		toSerialize["option_show_weekly"] = o.OptionShowWeekly
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	if o.LimitRegion != nil {
		toSerialize["limit_region"] = o.LimitRegion
	}
	return json.Marshal(toSerialize)
}

type NullableCalendarRequestFilters struct {
	value *CalendarRequestFilters
	isSet bool
}

func (v NullableCalendarRequestFilters) Get() *CalendarRequestFilters {
	return v.value
}

func (v *NullableCalendarRequestFilters) Set(val *CalendarRequestFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableCalendarRequestFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableCalendarRequestFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalendarRequestFilters(val *CalendarRequestFilters) *NullableCalendarRequestFilters {
	return &NullableCalendarRequestFilters{value: val, isSet: true}
}

func (v NullableCalendarRequestFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalendarRequestFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


