/*
 * Client Portal Web API
 *
 * Production version of the Client Portal Web API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ScannerResult struct for ScannerResult
type ScannerResult struct {
	Total *int32 `json:"total,omitempty"`
	Size *int32 `json:"size,omitempty"`
	Offset *int32 `json:"offset,omitempty"`
	ScanTime *string `json:"scanTime,omitempty"`
	Id *float32 `json:"id,omitempty"`
	Position *string `json:"position,omitempty"`
	Contracts *ScannerResultContracts `json:"Contracts,omitempty"`
}

// NewScannerResult instantiates a new ScannerResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScannerResult() *ScannerResult {
	this := ScannerResult{}
	return &this
}

// NewScannerResultWithDefaults instantiates a new ScannerResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScannerResultWithDefaults() *ScannerResult {
	this := ScannerResult{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ScannerResult) GetTotal() int32 {
	if o == nil || o.Total == nil {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScannerResult) GetTotalOk() (*int32, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ScannerResult) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *ScannerResult) SetTotal(v int32) {
	o.Total = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ScannerResult) GetSize() int32 {
	if o == nil || o.Size == nil {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScannerResult) GetSizeOk() (*int32, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ScannerResult) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *ScannerResult) SetSize(v int32) {
	o.Size = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *ScannerResult) GetOffset() int32 {
	if o == nil || o.Offset == nil {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScannerResult) GetOffsetOk() (*int32, bool) {
	if o == nil || o.Offset == nil {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *ScannerResult) HasOffset() bool {
	if o != nil && o.Offset != nil {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *ScannerResult) SetOffset(v int32) {
	o.Offset = &v
}

// GetScanTime returns the ScanTime field value if set, zero value otherwise.
func (o *ScannerResult) GetScanTime() string {
	if o == nil || o.ScanTime == nil {
		var ret string
		return ret
	}
	return *o.ScanTime
}

// GetScanTimeOk returns a tuple with the ScanTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScannerResult) GetScanTimeOk() (*string, bool) {
	if o == nil || o.ScanTime == nil {
		return nil, false
	}
	return o.ScanTime, true
}

// HasScanTime returns a boolean if a field has been set.
func (o *ScannerResult) HasScanTime() bool {
	if o != nil && o.ScanTime != nil {
		return true
	}

	return false
}

// SetScanTime gets a reference to the given string and assigns it to the ScanTime field.
func (o *ScannerResult) SetScanTime(v string) {
	o.ScanTime = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ScannerResult) GetId() float32 {
	if o == nil || o.Id == nil {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScannerResult) GetIdOk() (*float32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ScannerResult) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *ScannerResult) SetId(v float32) {
	o.Id = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *ScannerResult) GetPosition() string {
	if o == nil || o.Position == nil {
		var ret string
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScannerResult) GetPositionOk() (*string, bool) {
	if o == nil || o.Position == nil {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *ScannerResult) HasPosition() bool {
	if o != nil && o.Position != nil {
		return true
	}

	return false
}

// SetPosition gets a reference to the given string and assigns it to the Position field.
func (o *ScannerResult) SetPosition(v string) {
	o.Position = &v
}

// GetContracts returns the Contracts field value if set, zero value otherwise.
func (o *ScannerResult) GetContracts() ScannerResultContracts {
	if o == nil || o.Contracts == nil {
		var ret ScannerResultContracts
		return ret
	}
	return *o.Contracts
}

// GetContractsOk returns a tuple with the Contracts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScannerResult) GetContractsOk() (*ScannerResultContracts, bool) {
	if o == nil || o.Contracts == nil {
		return nil, false
	}
	return o.Contracts, true
}

// HasContracts returns a boolean if a field has been set.
func (o *ScannerResult) HasContracts() bool {
	if o != nil && o.Contracts != nil {
		return true
	}

	return false
}

// SetContracts gets a reference to the given ScannerResultContracts and assigns it to the Contracts field.
func (o *ScannerResult) SetContracts(v ScannerResultContracts) {
	o.Contracts = &v
}

func (o ScannerResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.Offset != nil {
		toSerialize["offset"] = o.Offset
	}
	if o.ScanTime != nil {
		toSerialize["scanTime"] = o.ScanTime
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Position != nil {
		toSerialize["position"] = o.Position
	}
	if o.Contracts != nil {
		toSerialize["Contracts"] = o.Contracts
	}
	return json.Marshal(toSerialize)
}

type NullableScannerResult struct {
	value *ScannerResult
	isSet bool
}

func (v NullableScannerResult) Get() *ScannerResult {
	return v.value
}

func (v *NullableScannerResult) Set(val *ScannerResult) {
	v.value = val
	v.isSet = true
}

func (v NullableScannerResult) IsSet() bool {
	return v.isSet
}

func (v *NullableScannerResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScannerResult(val *ScannerResult) *NullableScannerResult {
	return &NullableScannerResult{value: val, isSet: true}
}

func (v NullableScannerResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScannerResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


