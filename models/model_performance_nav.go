/*
 * Client Portal Web API
 *
 * Production version of the Client Portal Web API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PerformanceNav Net asset value data for the account or consolidated accounts. NAV data is not applicable to benchmarks.
type PerformanceNav struct {
	// array of dates, the length should be same as the length of returns inside data.
	Dates *[]string `json:"dates,omitempty"`
	// D means Day
	Freq *string `json:"freq,omitempty"`
	Data *[]PerformanceCpsData `json:"data,omitempty"`
}

// NewPerformanceNav instantiates a new PerformanceNav object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPerformanceNav() *PerformanceNav {
	this := PerformanceNav{}
	return &this
}

// NewPerformanceNavWithDefaults instantiates a new PerformanceNav object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPerformanceNavWithDefaults() *PerformanceNav {
	this := PerformanceNav{}
	return &this
}

// GetDates returns the Dates field value if set, zero value otherwise.
func (o *PerformanceNav) GetDates() []string {
	if o == nil || o.Dates == nil {
		var ret []string
		return ret
	}
	return *o.Dates
}

// GetDatesOk returns a tuple with the Dates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerformanceNav) GetDatesOk() (*[]string, bool) {
	if o == nil || o.Dates == nil {
		return nil, false
	}
	return o.Dates, true
}

// HasDates returns a boolean if a field has been set.
func (o *PerformanceNav) HasDates() bool {
	if o != nil && o.Dates != nil {
		return true
	}

	return false
}

// SetDates gets a reference to the given []string and assigns it to the Dates field.
func (o *PerformanceNav) SetDates(v []string) {
	o.Dates = &v
}

// GetFreq returns the Freq field value if set, zero value otherwise.
func (o *PerformanceNav) GetFreq() string {
	if o == nil || o.Freq == nil {
		var ret string
		return ret
	}
	return *o.Freq
}

// GetFreqOk returns a tuple with the Freq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerformanceNav) GetFreqOk() (*string, bool) {
	if o == nil || o.Freq == nil {
		return nil, false
	}
	return o.Freq, true
}

// HasFreq returns a boolean if a field has been set.
func (o *PerformanceNav) HasFreq() bool {
	if o != nil && o.Freq != nil {
		return true
	}

	return false
}

// SetFreq gets a reference to the given string and assigns it to the Freq field.
func (o *PerformanceNav) SetFreq(v string) {
	o.Freq = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *PerformanceNav) GetData() []PerformanceCpsData {
	if o == nil || o.Data == nil {
		var ret []PerformanceCpsData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerformanceNav) GetDataOk() (*[]PerformanceCpsData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *PerformanceNav) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []PerformanceCpsData and assigns it to the Data field.
func (o *PerformanceNav) SetData(v []PerformanceCpsData) {
	o.Data = &v
}

func (o PerformanceNav) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Dates != nil {
		toSerialize["dates"] = o.Dates
	}
	if o.Freq != nil {
		toSerialize["freq"] = o.Freq
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullablePerformanceNav struct {
	value *PerformanceNav
	isSet bool
}

func (v NullablePerformanceNav) Get() *PerformanceNav {
	return v.value
}

func (v *NullablePerformanceNav) Set(val *PerformanceNav) {
	v.value = val
	v.isSet = true
}

func (v NullablePerformanceNav) IsSet() bool {
	return v.isSet
}

func (v *NullablePerformanceNav) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePerformanceNav(val *PerformanceNav) *NullablePerformanceNav {
	return &NullablePerformanceNav{value: val, isSet: true}
}

func (v NullablePerformanceNav) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePerformanceNav) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


