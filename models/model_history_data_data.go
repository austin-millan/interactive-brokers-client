/*
 * Client Portal Web API
 *
 * Production version of the Client Portal Web API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// HistoryDataData struct for HistoryDataData
type HistoryDataData struct {
	// open price
	O *float32 `json:"o,omitempty"`
	// close price
	C *float32 `json:"c,omitempty"`
	// high price
	H *float32 `json:"h,omitempty"`
	// low price
	L *float32 `json:"l,omitempty"`
	// volume
	V *float32 `json:"v,omitempty"`
	// unix time stamp
	T *float32 `json:"t,omitempty"`
}

// NewHistoryDataData instantiates a new HistoryDataData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryDataData() *HistoryDataData {
	this := HistoryDataData{}
	return &this
}

// NewHistoryDataDataWithDefaults instantiates a new HistoryDataData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryDataDataWithDefaults() *HistoryDataData {
	this := HistoryDataData{}
	return &this
}

// GetO returns the O field value if set, zero value otherwise.
func (o *HistoryDataData) GetO() float32 {
	if o == nil || o.O == nil {
		var ret float32
		return ret
	}
	return *o.O
}

// GetOOk returns a tuple with the O field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryDataData) GetOOk() (*float32, bool) {
	if o == nil || o.O == nil {
		return nil, false
	}
	return o.O, true
}

// HasO returns a boolean if a field has been set.
func (o *HistoryDataData) HasO() bool {
	if o != nil && o.O != nil {
		return true
	}

	return false
}

// SetO gets a reference to the given float32 and assigns it to the O field.
func (o *HistoryDataData) SetO(v float32) {
	o.O = &v
}

// GetC returns the C field value if set, zero value otherwise.
func (o *HistoryDataData) GetC() float32 {
	if o == nil || o.C == nil {
		var ret float32
		return ret
	}
	return *o.C
}

// GetCOk returns a tuple with the C field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryDataData) GetCOk() (*float32, bool) {
	if o == nil || o.C == nil {
		return nil, false
	}
	return o.C, true
}

// HasC returns a boolean if a field has been set.
func (o *HistoryDataData) HasC() bool {
	if o != nil && o.C != nil {
		return true
	}

	return false
}

// SetC gets a reference to the given float32 and assigns it to the C field.
func (o *HistoryDataData) SetC(v float32) {
	o.C = &v
}

// GetH returns the H field value if set, zero value otherwise.
func (o *HistoryDataData) GetH() float32 {
	if o == nil || o.H == nil {
		var ret float32
		return ret
	}
	return *o.H
}

// GetHOk returns a tuple with the H field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryDataData) GetHOk() (*float32, bool) {
	if o == nil || o.H == nil {
		return nil, false
	}
	return o.H, true
}

// HasH returns a boolean if a field has been set.
func (o *HistoryDataData) HasH() bool {
	if o != nil && o.H != nil {
		return true
	}

	return false
}

// SetH gets a reference to the given float32 and assigns it to the H field.
func (o *HistoryDataData) SetH(v float32) {
	o.H = &v
}

// GetL returns the L field value if set, zero value otherwise.
func (o *HistoryDataData) GetL() float32 {
	if o == nil || o.L == nil {
		var ret float32
		return ret
	}
	return *o.L
}

// GetLOk returns a tuple with the L field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryDataData) GetLOk() (*float32, bool) {
	if o == nil || o.L == nil {
		return nil, false
	}
	return o.L, true
}

// HasL returns a boolean if a field has been set.
func (o *HistoryDataData) HasL() bool {
	if o != nil && o.L != nil {
		return true
	}

	return false
}

// SetL gets a reference to the given float32 and assigns it to the L field.
func (o *HistoryDataData) SetL(v float32) {
	o.L = &v
}

// GetV returns the V field value if set, zero value otherwise.
func (o *HistoryDataData) GetV() float32 {
	if o == nil || o.V == nil {
		var ret float32
		return ret
	}
	return *o.V
}

// GetVOk returns a tuple with the V field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryDataData) GetVOk() (*float32, bool) {
	if o == nil || o.V == nil {
		return nil, false
	}
	return o.V, true
}

// HasV returns a boolean if a field has been set.
func (o *HistoryDataData) HasV() bool {
	if o != nil && o.V != nil {
		return true
	}

	return false
}

// SetV gets a reference to the given float32 and assigns it to the V field.
func (o *HistoryDataData) SetV(v float32) {
	o.V = &v
}

// GetT returns the T field value if set, zero value otherwise.
func (o *HistoryDataData) GetT() float32 {
	if o == nil || o.T == nil {
		var ret float32
		return ret
	}
	return *o.T
}

// GetTOk returns a tuple with the T field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryDataData) GetTOk() (*float32, bool) {
	if o == nil || o.T == nil {
		return nil, false
	}
	return o.T, true
}

// HasT returns a boolean if a field has been set.
func (o *HistoryDataData) HasT() bool {
	if o != nil && o.T != nil {
		return true
	}

	return false
}

// SetT gets a reference to the given float32 and assigns it to the T field.
func (o *HistoryDataData) SetT(v float32) {
	o.T = &v
}

func (o HistoryDataData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.O != nil {
		toSerialize["o"] = o.O
	}
	if o.C != nil {
		toSerialize["c"] = o.C
	}
	if o.H != nil {
		toSerialize["h"] = o.H
	}
	if o.L != nil {
		toSerialize["l"] = o.L
	}
	if o.V != nil {
		toSerialize["v"] = o.V
	}
	if o.T != nil {
		toSerialize["t"] = o.T
	}
	return json.Marshal(toSerialize)
}

type NullableHistoryDataData struct {
	value *HistoryDataData
	isSet bool
}

func (v NullableHistoryDataData) Get() *HistoryDataData {
	return v.value
}

func (v *NullableHistoryDataData) Set(val *HistoryDataData) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryDataData) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryDataData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryDataData(val *HistoryDataData) *NullableHistoryDataData {
	return &NullableHistoryDataData{value: val, isSet: true}
}

func (v NullableHistoryDataData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryDataData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


