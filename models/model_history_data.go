/*
 * Client Portal Web API
 *
 * Production version of the Client Portal Web API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// HistoryData struct for HistoryData
type HistoryData struct {
	// start date time
	Start *string `json:"start,omitempty"`
	// Market Data Availability. The field may contain two chars. The first char is the primary code: R = Realtime, D = Delayed, Z = Frozen, Y = Frozen Delayed. The second char is the secondary code: P = Snapshot Available, p = Consolidated. 
	MdAvailability *string `json:"mdAvailability,omitempty"`
	BarLength *int32 `json:"barLength,omitempty"`
	Delay *int32 `json:"delay,omitempty"`
	// High value during this time series with format %h/%v/%t. %h is the high price (scaled by priceFactor), %v is volume (volume factor will always be 100 (reported volume = actual volume/100)) and %t is minutes from start time of the chart 
	High *string `json:"high,omitempty"`
	// Low value during this time series with format %l/%v/%t. %l is the low price (scaled by priceFactor), %v is volume (volume factor will always be 100 (reported volume = actual volume/100)) and %t is minutes from start time of the chart 
	Low *string `json:"low,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Text *string `json:"text,omitempty"`
	TickNum *string `json:"tickNum,omitempty"`
	TimePeriod *string `json:"timePeriod,omitempty"`
	// priceFactor is price increment obtained from display rule
	PriceFactor *int32 `json:"priceFactor,omitempty"`
	Data *[]HistoryDataData `json:"data,omitempty"`
	// total number of points
	Points *float32 `json:"points,omitempty"`
	TravelTime *float32 `json:"travelTime,omitempty"`
}

// NewHistoryData instantiates a new HistoryData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryData() *HistoryData {
	this := HistoryData{}
	return &this
}

// NewHistoryDataWithDefaults instantiates a new HistoryData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryDataWithDefaults() *HistoryData {
	this := HistoryData{}
	return &this
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *HistoryData) GetStart() string {
	if o == nil || o.Start == nil {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetStartOk() (*string, bool) {
	if o == nil || o.Start == nil {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *HistoryData) HasStart() bool {
	if o != nil && o.Start != nil {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *HistoryData) SetStart(v string) {
	o.Start = &v
}

// GetMdAvailability returns the MdAvailability field value if set, zero value otherwise.
func (o *HistoryData) GetMdAvailability() string {
	if o == nil || o.MdAvailability == nil {
		var ret string
		return ret
	}
	return *o.MdAvailability
}

// GetMdAvailabilityOk returns a tuple with the MdAvailability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetMdAvailabilityOk() (*string, bool) {
	if o == nil || o.MdAvailability == nil {
		return nil, false
	}
	return o.MdAvailability, true
}

// HasMdAvailability returns a boolean if a field has been set.
func (o *HistoryData) HasMdAvailability() bool {
	if o != nil && o.MdAvailability != nil {
		return true
	}

	return false
}

// SetMdAvailability gets a reference to the given string and assigns it to the MdAvailability field.
func (o *HistoryData) SetMdAvailability(v string) {
	o.MdAvailability = &v
}

// GetBarLength returns the BarLength field value if set, zero value otherwise.
func (o *HistoryData) GetBarLength() int32 {
	if o == nil || o.BarLength == nil {
		var ret int32
		return ret
	}
	return *o.BarLength
}

// GetBarLengthOk returns a tuple with the BarLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetBarLengthOk() (*int32, bool) {
	if o == nil || o.BarLength == nil {
		return nil, false
	}
	return o.BarLength, true
}

// HasBarLength returns a boolean if a field has been set.
func (o *HistoryData) HasBarLength() bool {
	if o != nil && o.BarLength != nil {
		return true
	}

	return false
}

// SetBarLength gets a reference to the given int32 and assigns it to the BarLength field.
func (o *HistoryData) SetBarLength(v int32) {
	o.BarLength = &v
}

// GetDelay returns the Delay field value if set, zero value otherwise.
func (o *HistoryData) GetDelay() int32 {
	if o == nil || o.Delay == nil {
		var ret int32
		return ret
	}
	return *o.Delay
}

// GetDelayOk returns a tuple with the Delay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetDelayOk() (*int32, bool) {
	if o == nil || o.Delay == nil {
		return nil, false
	}
	return o.Delay, true
}

// HasDelay returns a boolean if a field has been set.
func (o *HistoryData) HasDelay() bool {
	if o != nil && o.Delay != nil {
		return true
	}

	return false
}

// SetDelay gets a reference to the given int32 and assigns it to the Delay field.
func (o *HistoryData) SetDelay(v int32) {
	o.Delay = &v
}

// GetHigh returns the High field value if set, zero value otherwise.
func (o *HistoryData) GetHigh() string {
	if o == nil || o.High == nil {
		var ret string
		return ret
	}
	return *o.High
}

// GetHighOk returns a tuple with the High field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetHighOk() (*string, bool) {
	if o == nil || o.High == nil {
		return nil, false
	}
	return o.High, true
}

// HasHigh returns a boolean if a field has been set.
func (o *HistoryData) HasHigh() bool {
	if o != nil && o.High != nil {
		return true
	}

	return false
}

// SetHigh gets a reference to the given string and assigns it to the High field.
func (o *HistoryData) SetHigh(v string) {
	o.High = &v
}

// GetLow returns the Low field value if set, zero value otherwise.
func (o *HistoryData) GetLow() string {
	if o == nil || o.Low == nil {
		var ret string
		return ret
	}
	return *o.Low
}

// GetLowOk returns a tuple with the Low field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetLowOk() (*string, bool) {
	if o == nil || o.Low == nil {
		return nil, false
	}
	return o.Low, true
}

// HasLow returns a boolean if a field has been set.
func (o *HistoryData) HasLow() bool {
	if o != nil && o.Low != nil {
		return true
	}

	return false
}

// SetLow gets a reference to the given string and assigns it to the Low field.
func (o *HistoryData) SetLow(v string) {
	o.Low = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *HistoryData) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *HistoryData) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *HistoryData) SetSymbol(v string) {
	o.Symbol = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *HistoryData) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *HistoryData) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *HistoryData) SetText(v string) {
	o.Text = &v
}

// GetTickNum returns the TickNum field value if set, zero value otherwise.
func (o *HistoryData) GetTickNum() string {
	if o == nil || o.TickNum == nil {
		var ret string
		return ret
	}
	return *o.TickNum
}

// GetTickNumOk returns a tuple with the TickNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetTickNumOk() (*string, bool) {
	if o == nil || o.TickNum == nil {
		return nil, false
	}
	return o.TickNum, true
}

// HasTickNum returns a boolean if a field has been set.
func (o *HistoryData) HasTickNum() bool {
	if o != nil && o.TickNum != nil {
		return true
	}

	return false
}

// SetTickNum gets a reference to the given string and assigns it to the TickNum field.
func (o *HistoryData) SetTickNum(v string) {
	o.TickNum = &v
}

// GetTimePeriod returns the TimePeriod field value if set, zero value otherwise.
func (o *HistoryData) GetTimePeriod() string {
	if o == nil || o.TimePeriod == nil {
		var ret string
		return ret
	}
	return *o.TimePeriod
}

// GetTimePeriodOk returns a tuple with the TimePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetTimePeriodOk() (*string, bool) {
	if o == nil || o.TimePeriod == nil {
		return nil, false
	}
	return o.TimePeriod, true
}

// HasTimePeriod returns a boolean if a field has been set.
func (o *HistoryData) HasTimePeriod() bool {
	if o != nil && o.TimePeriod != nil {
		return true
	}

	return false
}

// SetTimePeriod gets a reference to the given string and assigns it to the TimePeriod field.
func (o *HistoryData) SetTimePeriod(v string) {
	o.TimePeriod = &v
}

// GetPriceFactor returns the PriceFactor field value if set, zero value otherwise.
func (o *HistoryData) GetPriceFactor() int32 {
	if o == nil || o.PriceFactor == nil {
		var ret int32
		return ret
	}
	return *o.PriceFactor
}

// GetPriceFactorOk returns a tuple with the PriceFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetPriceFactorOk() (*int32, bool) {
	if o == nil || o.PriceFactor == nil {
		return nil, false
	}
	return o.PriceFactor, true
}

// HasPriceFactor returns a boolean if a field has been set.
func (o *HistoryData) HasPriceFactor() bool {
	if o != nil && o.PriceFactor != nil {
		return true
	}

	return false
}

// SetPriceFactor gets a reference to the given int32 and assigns it to the PriceFactor field.
func (o *HistoryData) SetPriceFactor(v int32) {
	o.PriceFactor = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *HistoryData) GetData() []HistoryDataData {
	if o == nil || o.Data == nil {
		var ret []HistoryDataData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetDataOk() (*[]HistoryDataData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *HistoryData) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []HistoryDataData and assigns it to the Data field.
func (o *HistoryData) SetData(v []HistoryDataData) {
	o.Data = &v
}

// GetPoints returns the Points field value if set, zero value otherwise.
func (o *HistoryData) GetPoints() float32 {
	if o == nil || o.Points == nil {
		var ret float32
		return ret
	}
	return *o.Points
}

// GetPointsOk returns a tuple with the Points field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetPointsOk() (*float32, bool) {
	if o == nil || o.Points == nil {
		return nil, false
	}
	return o.Points, true
}

// HasPoints returns a boolean if a field has been set.
func (o *HistoryData) HasPoints() bool {
	if o != nil && o.Points != nil {
		return true
	}

	return false
}

// SetPoints gets a reference to the given float32 and assigns it to the Points field.
func (o *HistoryData) SetPoints(v float32) {
	o.Points = &v
}

// GetTravelTime returns the TravelTime field value if set, zero value otherwise.
func (o *HistoryData) GetTravelTime() float32 {
	if o == nil || o.TravelTime == nil {
		var ret float32
		return ret
	}
	return *o.TravelTime
}

// GetTravelTimeOk returns a tuple with the TravelTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetTravelTimeOk() (*float32, bool) {
	if o == nil || o.TravelTime == nil {
		return nil, false
	}
	return o.TravelTime, true
}

// HasTravelTime returns a boolean if a field has been set.
func (o *HistoryData) HasTravelTime() bool {
	if o != nil && o.TravelTime != nil {
		return true
	}

	return false
}

// SetTravelTime gets a reference to the given float32 and assigns it to the TravelTime field.
func (o *HistoryData) SetTravelTime(v float32) {
	o.TravelTime = &v
}

func (o HistoryData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Start != nil {
		toSerialize["start"] = o.Start
	}
	if o.MdAvailability != nil {
		toSerialize["mdAvailability"] = o.MdAvailability
	}
	if o.BarLength != nil {
		toSerialize["barLength"] = o.BarLength
	}
	if o.Delay != nil {
		toSerialize["delay"] = o.Delay
	}
	if o.High != nil {
		toSerialize["high"] = o.High
	}
	if o.Low != nil {
		toSerialize["low"] = o.Low
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	if o.TickNum != nil {
		toSerialize["tickNum"] = o.TickNum
	}
	if o.TimePeriod != nil {
		toSerialize["timePeriod"] = o.TimePeriod
	}
	if o.PriceFactor != nil {
		toSerialize["priceFactor"] = o.PriceFactor
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Points != nil {
		toSerialize["points"] = o.Points
	}
	if o.TravelTime != nil {
		toSerialize["travelTime"] = o.TravelTime
	}
	return json.Marshal(toSerialize)
}

type NullableHistoryData struct {
	value *HistoryData
	isSet bool
}

func (v NullableHistoryData) Get() *HistoryData {
	return v.value
}

func (v *NullableHistoryData) Set(val *HistoryData) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryData) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryData(val *HistoryData) *NullableHistoryData {
	return &NullableHistoryData{value: val, isSet: true}
}

func (v NullableHistoryData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


