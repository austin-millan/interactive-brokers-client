/*
 * Client Portal Web API
 *
 * Production version of the Client Portal Web API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse2008 struct for InlineResponse2008
type InlineResponse2008 struct {
	BASE *Ledger `json:"BASE,omitempty"`
}

// NewInlineResponse2008 instantiates a new InlineResponse2008 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2008() *InlineResponse2008 {
	this := InlineResponse2008{}
	return &this
}

// NewInlineResponse2008WithDefaults instantiates a new InlineResponse2008 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2008WithDefaults() *InlineResponse2008 {
	this := InlineResponse2008{}
	return &this
}

// GetBASE returns the BASE field value if set, zero value otherwise.
func (o *InlineResponse2008) GetBASE() Ledger {
	if o == nil || o.BASE == nil {
		var ret Ledger
		return ret
	}
	return *o.BASE
}

// GetBASEOk returns a tuple with the BASE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetBASEOk() (*Ledger, bool) {
	if o == nil || o.BASE == nil {
		return nil, false
	}
	return o.BASE, true
}

// HasBASE returns a boolean if a field has been set.
func (o *InlineResponse2008) HasBASE() bool {
	if o != nil && o.BASE != nil {
		return true
	}

	return false
}

// SetBASE gets a reference to the given Ledger and assigns it to the BASE field.
func (o *InlineResponse2008) SetBASE(v Ledger) {
	o.BASE = &v
}

func (o InlineResponse2008) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BASE != nil {
		toSerialize["BASE"] = o.BASE
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2008 struct {
	value *InlineResponse2008
	isSet bool
}

func (v NullableInlineResponse2008) Get() *InlineResponse2008 {
	return v.value
}

func (v *NullableInlineResponse2008) Set(val *InlineResponse2008) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2008) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2008) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2008(val *InlineResponse2008) *NullableInlineResponse2008 {
	return &NullableInlineResponse2008{value: val, isSet: true}
}

func (v NullableInlineResponse2008) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2008) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


