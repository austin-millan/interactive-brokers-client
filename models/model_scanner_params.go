/*
 * Client Portal Web API
 *
 * Production version of the Client Portal Web API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ScannerParams struct for ScannerParams
type ScannerParams struct {
	// for example-STK
	Instrument *string `json:"instrument,omitempty"`
	// for example-TOP_PERC_GAIN
	Type *string `json:"type,omitempty"`
	Filter *[]ScannerParamsFilter `json:"filter,omitempty"`
	Location *string `json:"location,omitempty"`
	Size *string `json:"size,omitempty"`
}

// NewScannerParams instantiates a new ScannerParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScannerParams() *ScannerParams {
	this := ScannerParams{}
	return &this
}

// NewScannerParamsWithDefaults instantiates a new ScannerParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScannerParamsWithDefaults() *ScannerParams {
	this := ScannerParams{}
	return &this
}

// GetInstrument returns the Instrument field value if set, zero value otherwise.
func (o *ScannerParams) GetInstrument() string {
	if o == nil || o.Instrument == nil {
		var ret string
		return ret
	}
	return *o.Instrument
}

// GetInstrumentOk returns a tuple with the Instrument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScannerParams) GetInstrumentOk() (*string, bool) {
	if o == nil || o.Instrument == nil {
		return nil, false
	}
	return o.Instrument, true
}

// HasInstrument returns a boolean if a field has been set.
func (o *ScannerParams) HasInstrument() bool {
	if o != nil && o.Instrument != nil {
		return true
	}

	return false
}

// SetInstrument gets a reference to the given string and assigns it to the Instrument field.
func (o *ScannerParams) SetInstrument(v string) {
	o.Instrument = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ScannerParams) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScannerParams) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ScannerParams) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ScannerParams) SetType(v string) {
	o.Type = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *ScannerParams) GetFilter() []ScannerParamsFilter {
	if o == nil || o.Filter == nil {
		var ret []ScannerParamsFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScannerParams) GetFilterOk() (*[]ScannerParamsFilter, bool) {
	if o == nil || o.Filter == nil {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *ScannerParams) HasFilter() bool {
	if o != nil && o.Filter != nil {
		return true
	}

	return false
}

// SetFilter gets a reference to the given []ScannerParamsFilter and assigns it to the Filter field.
func (o *ScannerParams) SetFilter(v []ScannerParamsFilter) {
	o.Filter = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ScannerParams) GetLocation() string {
	if o == nil || o.Location == nil {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScannerParams) GetLocationOk() (*string, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ScannerParams) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *ScannerParams) SetLocation(v string) {
	o.Location = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ScannerParams) GetSize() string {
	if o == nil || o.Size == nil {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScannerParams) GetSizeOk() (*string, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ScannerParams) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *ScannerParams) SetSize(v string) {
	o.Size = &v
}

func (o ScannerParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Instrument != nil {
		toSerialize["instrument"] = o.Instrument
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Filter != nil {
		toSerialize["filter"] = o.Filter
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	return json.Marshal(toSerialize)
}

type NullableScannerParams struct {
	value *ScannerParams
	isSet bool
}

func (v NullableScannerParams) Get() *ScannerParams {
	return v.value
}

func (v *NullableScannerParams) Set(val *ScannerParams) {
	v.value = val
	v.isSet = true
}

func (v NullableScannerParams) IsSet() bool {
	return v.isSet
}

func (v *NullableScannerParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScannerParams(val *ScannerParams) *NullableScannerParams {
	return &NullableScannerParams{value: val, isSet: true}
}

func (v NullableScannerParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScannerParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


