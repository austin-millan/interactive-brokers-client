/*
 * Client Portal Web API
 *
 * Production version of the Client Portal Web API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject7 struct for InlineObject7
type InlineObject7 struct {
	// symbol or name to be searched
	Symbol string `json:"symbol"`
	// should be true if the search is to be performed by name. false by default.
	Name *bool `json:"name,omitempty"`
	// If search is done by name, only the assets provided in this field will be returned. Currently, only STK is supported.
	SecType *string `json:"secType,omitempty"`
}

// NewInlineObject7 instantiates a new InlineObject7 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject7(symbol string, ) *InlineObject7 {
	this := InlineObject7{}
	this.Symbol = symbol
	return &this
}

// NewInlineObject7WithDefaults instantiates a new InlineObject7 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject7WithDefaults() *InlineObject7 {
	this := InlineObject7{}
	return &this
}

// GetSymbol returns the Symbol field value
func (o *InlineObject7) GetSymbol() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *InlineObject7) GetSymbolOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *InlineObject7) SetSymbol(v string) {
	o.Symbol = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InlineObject7) GetName() bool {
	if o == nil || o.Name == nil {
		var ret bool
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject7) GetNameOk() (*bool, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InlineObject7) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given bool and assigns it to the Name field.
func (o *InlineObject7) SetName(v bool) {
	o.Name = &v
}

// GetSecType returns the SecType field value if set, zero value otherwise.
func (o *InlineObject7) GetSecType() string {
	if o == nil || o.SecType == nil {
		var ret string
		return ret
	}
	return *o.SecType
}

// GetSecTypeOk returns a tuple with the SecType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject7) GetSecTypeOk() (*string, bool) {
	if o == nil || o.SecType == nil {
		return nil, false
	}
	return o.SecType, true
}

// HasSecType returns a boolean if a field has been set.
func (o *InlineObject7) HasSecType() bool {
	if o != nil && o.SecType != nil {
		return true
	}

	return false
}

// SetSecType gets a reference to the given string and assigns it to the SecType field.
func (o *InlineObject7) SetSecType(v string) {
	o.SecType = &v
}

func (o InlineObject7) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.SecType != nil {
		toSerialize["secType"] = o.SecType
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject7 struct {
	value *InlineObject7
	isSet bool
}

func (v NullableInlineObject7) Get() *InlineObject7 {
	return v.value
}

func (v *NullableInlineObject7) Set(val *InlineObject7) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject7) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject7) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject7(val *InlineObject7) *NullableInlineObject7 {
	return &NullableInlineObject7{value: val, isSet: true}
}

func (v NullableInlineObject7) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject7) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


