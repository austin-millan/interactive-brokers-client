/*
 * Client Portal Web API
 *
 * Production version of the Client Portal Web API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Order contains all the order related info
type Order struct {
	// account id
	Acct *string `json:"acct,omitempty"`
	Conid *int32 `json:"conid,omitempty"`
	OrderDesc *string `json:"orderDesc,omitempty"`
	Description1 *string `json:"description1,omitempty"`
	// for exmple FB
	Ticker *string `json:"ticker,omitempty"`
	// for example STK
	SecType *string `json:"secType,omitempty"`
	// for example NASDAQ.NMS
	ListingExchange *string `json:"listingExchange,omitempty"`
	RemainingQuantity *string `json:"remainingQuantity,omitempty"`
	FilledQuantity *string `json:"filledQuantity,omitempty"`
	CompanyName *string `json:"companyName,omitempty"`
	// PendingSubmit - Indicates the order was sent, but confirmation has not been received that it has been received by the destination.                  Occurs most commonly if an exchange is closed. PendingCancel - Indicates that a request has been sent to cancel an order but confirmation has not been received of its cancellation. PreSubmitted - Indicates that a simulated order type has been accepted by the IBKR system and that this order has yet to be elected.                 The order is held in the IBKR system until the election criteria are met. At that time the order is transmitted to the order destination as specified.  Submitted - Indicates that the order has been accepted at the order destination and is working. Cancelled - Indicates that the balance of the order has been confirmed cancelled by the IB system.              This could occur unexpectedly when IB or the destination has rejected the order.   Filled - Indicates that the order has been completely filled.  Inactive - Indicates the order is not working, for instance if the order was invalid and triggered an error message,            or if the order was to short a security and shares have not yet been located.  
	Status *string `json:"status,omitempty"`
	// for example Limit
	OrigOrderType *string `json:"origOrderType,omitempty"`
	// BUY or SELL
	Side *string `json:"side,omitempty"`
	Price *float32 `json:"price,omitempty"`
	// back-ground color
	BgColor *string `json:"bgColor,omitempty"`
	FgColor *string `json:"fgColor,omitempty"`
	OrderId *int32 `json:"orderId,omitempty"`
	// Only exists in child order of bracket
	ParentId *string `json:"parentId,omitempty"`
	// User defined string used to identify the order. Value is set using \"cOID\" field while placing an order.
	OrderRef *string `json:"order_ref,omitempty"`
}

// NewOrder instantiates a new Order object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrder() *Order {
	this := Order{}
	return &this
}

// NewOrderWithDefaults instantiates a new Order object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderWithDefaults() *Order {
	this := Order{}
	return &this
}

// GetAcct returns the Acct field value if set, zero value otherwise.
func (o *Order) GetAcct() string {
	if o == nil || o.Acct == nil {
		var ret string
		return ret
	}
	return *o.Acct
}

// GetAcctOk returns a tuple with the Acct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetAcctOk() (*string, bool) {
	if o == nil || o.Acct == nil {
		return nil, false
	}
	return o.Acct, true
}

// HasAcct returns a boolean if a field has been set.
func (o *Order) HasAcct() bool {
	if o != nil && o.Acct != nil {
		return true
	}

	return false
}

// SetAcct gets a reference to the given string and assigns it to the Acct field.
func (o *Order) SetAcct(v string) {
	o.Acct = &v
}

// GetConid returns the Conid field value if set, zero value otherwise.
func (o *Order) GetConid() int32 {
	if o == nil || o.Conid == nil {
		var ret int32
		return ret
	}
	return *o.Conid
}

// GetConidOk returns a tuple with the Conid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetConidOk() (*int32, bool) {
	if o == nil || o.Conid == nil {
		return nil, false
	}
	return o.Conid, true
}

// HasConid returns a boolean if a field has been set.
func (o *Order) HasConid() bool {
	if o != nil && o.Conid != nil {
		return true
	}

	return false
}

// SetConid gets a reference to the given int32 and assigns it to the Conid field.
func (o *Order) SetConid(v int32) {
	o.Conid = &v
}

// GetOrderDesc returns the OrderDesc field value if set, zero value otherwise.
func (o *Order) GetOrderDesc() string {
	if o == nil || o.OrderDesc == nil {
		var ret string
		return ret
	}
	return *o.OrderDesc
}

// GetOrderDescOk returns a tuple with the OrderDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetOrderDescOk() (*string, bool) {
	if o == nil || o.OrderDesc == nil {
		return nil, false
	}
	return o.OrderDesc, true
}

// HasOrderDesc returns a boolean if a field has been set.
func (o *Order) HasOrderDesc() bool {
	if o != nil && o.OrderDesc != nil {
		return true
	}

	return false
}

// SetOrderDesc gets a reference to the given string and assigns it to the OrderDesc field.
func (o *Order) SetOrderDesc(v string) {
	o.OrderDesc = &v
}

// GetDescription1 returns the Description1 field value if set, zero value otherwise.
func (o *Order) GetDescription1() string {
	if o == nil || o.Description1 == nil {
		var ret string
		return ret
	}
	return *o.Description1
}

// GetDescription1Ok returns a tuple with the Description1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetDescription1Ok() (*string, bool) {
	if o == nil || o.Description1 == nil {
		return nil, false
	}
	return o.Description1, true
}

// HasDescription1 returns a boolean if a field has been set.
func (o *Order) HasDescription1() bool {
	if o != nil && o.Description1 != nil {
		return true
	}

	return false
}

// SetDescription1 gets a reference to the given string and assigns it to the Description1 field.
func (o *Order) SetDescription1(v string) {
	o.Description1 = &v
}

// GetTicker returns the Ticker field value if set, zero value otherwise.
func (o *Order) GetTicker() string {
	if o == nil || o.Ticker == nil {
		var ret string
		return ret
	}
	return *o.Ticker
}

// GetTickerOk returns a tuple with the Ticker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetTickerOk() (*string, bool) {
	if o == nil || o.Ticker == nil {
		return nil, false
	}
	return o.Ticker, true
}

// HasTicker returns a boolean if a field has been set.
func (o *Order) HasTicker() bool {
	if o != nil && o.Ticker != nil {
		return true
	}

	return false
}

// SetTicker gets a reference to the given string and assigns it to the Ticker field.
func (o *Order) SetTicker(v string) {
	o.Ticker = &v
}

// GetSecType returns the SecType field value if set, zero value otherwise.
func (o *Order) GetSecType() string {
	if o == nil || o.SecType == nil {
		var ret string
		return ret
	}
	return *o.SecType
}

// GetSecTypeOk returns a tuple with the SecType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetSecTypeOk() (*string, bool) {
	if o == nil || o.SecType == nil {
		return nil, false
	}
	return o.SecType, true
}

// HasSecType returns a boolean if a field has been set.
func (o *Order) HasSecType() bool {
	if o != nil && o.SecType != nil {
		return true
	}

	return false
}

// SetSecType gets a reference to the given string and assigns it to the SecType field.
func (o *Order) SetSecType(v string) {
	o.SecType = &v
}

// GetListingExchange returns the ListingExchange field value if set, zero value otherwise.
func (o *Order) GetListingExchange() string {
	if o == nil || o.ListingExchange == nil {
		var ret string
		return ret
	}
	return *o.ListingExchange
}

// GetListingExchangeOk returns a tuple with the ListingExchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetListingExchangeOk() (*string, bool) {
	if o == nil || o.ListingExchange == nil {
		return nil, false
	}
	return o.ListingExchange, true
}

// HasListingExchange returns a boolean if a field has been set.
func (o *Order) HasListingExchange() bool {
	if o != nil && o.ListingExchange != nil {
		return true
	}

	return false
}

// SetListingExchange gets a reference to the given string and assigns it to the ListingExchange field.
func (o *Order) SetListingExchange(v string) {
	o.ListingExchange = &v
}

// GetRemainingQuantity returns the RemainingQuantity field value if set, zero value otherwise.
func (o *Order) GetRemainingQuantity() string {
	if o == nil || o.RemainingQuantity == nil {
		var ret string
		return ret
	}
	return *o.RemainingQuantity
}

// GetRemainingQuantityOk returns a tuple with the RemainingQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetRemainingQuantityOk() (*string, bool) {
	if o == nil || o.RemainingQuantity == nil {
		return nil, false
	}
	return o.RemainingQuantity, true
}

// HasRemainingQuantity returns a boolean if a field has been set.
func (o *Order) HasRemainingQuantity() bool {
	if o != nil && o.RemainingQuantity != nil {
		return true
	}

	return false
}

// SetRemainingQuantity gets a reference to the given string and assigns it to the RemainingQuantity field.
func (o *Order) SetRemainingQuantity(v string) {
	o.RemainingQuantity = &v
}

// GetFilledQuantity returns the FilledQuantity field value if set, zero value otherwise.
func (o *Order) GetFilledQuantity() string {
	if o == nil || o.FilledQuantity == nil {
		var ret string
		return ret
	}
	return *o.FilledQuantity
}

// GetFilledQuantityOk returns a tuple with the FilledQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetFilledQuantityOk() (*string, bool) {
	if o == nil || o.FilledQuantity == nil {
		return nil, false
	}
	return o.FilledQuantity, true
}

// HasFilledQuantity returns a boolean if a field has been set.
func (o *Order) HasFilledQuantity() bool {
	if o != nil && o.FilledQuantity != nil {
		return true
	}

	return false
}

// SetFilledQuantity gets a reference to the given string and assigns it to the FilledQuantity field.
func (o *Order) SetFilledQuantity(v string) {
	o.FilledQuantity = &v
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise.
func (o *Order) GetCompanyName() string {
	if o == nil || o.CompanyName == nil {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetCompanyNameOk() (*string, bool) {
	if o == nil || o.CompanyName == nil {
		return nil, false
	}
	return o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *Order) HasCompanyName() bool {
	if o != nil && o.CompanyName != nil {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *Order) SetCompanyName(v string) {
	o.CompanyName = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Order) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Order) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Order) SetStatus(v string) {
	o.Status = &v
}

// GetOrigOrderType returns the OrigOrderType field value if set, zero value otherwise.
func (o *Order) GetOrigOrderType() string {
	if o == nil || o.OrigOrderType == nil {
		var ret string
		return ret
	}
	return *o.OrigOrderType
}

// GetOrigOrderTypeOk returns a tuple with the OrigOrderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetOrigOrderTypeOk() (*string, bool) {
	if o == nil || o.OrigOrderType == nil {
		return nil, false
	}
	return o.OrigOrderType, true
}

// HasOrigOrderType returns a boolean if a field has been set.
func (o *Order) HasOrigOrderType() bool {
	if o != nil && o.OrigOrderType != nil {
		return true
	}

	return false
}

// SetOrigOrderType gets a reference to the given string and assigns it to the OrigOrderType field.
func (o *Order) SetOrigOrderType(v string) {
	o.OrigOrderType = &v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *Order) GetSide() string {
	if o == nil || o.Side == nil {
		var ret string
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetSideOk() (*string, bool) {
	if o == nil || o.Side == nil {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *Order) HasSide() bool {
	if o != nil && o.Side != nil {
		return true
	}

	return false
}

// SetSide gets a reference to the given string and assigns it to the Side field.
func (o *Order) SetSide(v string) {
	o.Side = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *Order) GetPrice() float32 {
	if o == nil || o.Price == nil {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetPriceOk() (*float32, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *Order) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *Order) SetPrice(v float32) {
	o.Price = &v
}

// GetBgColor returns the BgColor field value if set, zero value otherwise.
func (o *Order) GetBgColor() string {
	if o == nil || o.BgColor == nil {
		var ret string
		return ret
	}
	return *o.BgColor
}

// GetBgColorOk returns a tuple with the BgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetBgColorOk() (*string, bool) {
	if o == nil || o.BgColor == nil {
		return nil, false
	}
	return o.BgColor, true
}

// HasBgColor returns a boolean if a field has been set.
func (o *Order) HasBgColor() bool {
	if o != nil && o.BgColor != nil {
		return true
	}

	return false
}

// SetBgColor gets a reference to the given string and assigns it to the BgColor field.
func (o *Order) SetBgColor(v string) {
	o.BgColor = &v
}

// GetFgColor returns the FgColor field value if set, zero value otherwise.
func (o *Order) GetFgColor() string {
	if o == nil || o.FgColor == nil {
		var ret string
		return ret
	}
	return *o.FgColor
}

// GetFgColorOk returns a tuple with the FgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetFgColorOk() (*string, bool) {
	if o == nil || o.FgColor == nil {
		return nil, false
	}
	return o.FgColor, true
}

// HasFgColor returns a boolean if a field has been set.
func (o *Order) HasFgColor() bool {
	if o != nil && o.FgColor != nil {
		return true
	}

	return false
}

// SetFgColor gets a reference to the given string and assigns it to the FgColor field.
func (o *Order) SetFgColor(v string) {
	o.FgColor = &v
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *Order) GetOrderId() int32 {
	if o == nil || o.OrderId == nil {
		var ret int32
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetOrderIdOk() (*int32, bool) {
	if o == nil || o.OrderId == nil {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *Order) HasOrderId() bool {
	if o != nil && o.OrderId != nil {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given int32 and assigns it to the OrderId field.
func (o *Order) SetOrderId(v int32) {
	o.OrderId = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *Order) GetParentId() string {
	if o == nil || o.ParentId == nil {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetParentIdOk() (*string, bool) {
	if o == nil || o.ParentId == nil {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *Order) HasParentId() bool {
	if o != nil && o.ParentId != nil {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *Order) SetParentId(v string) {
	o.ParentId = &v
}

// GetOrderRef returns the OrderRef field value if set, zero value otherwise.
func (o *Order) GetOrderRef() string {
	if o == nil || o.OrderRef == nil {
		var ret string
		return ret
	}
	return *o.OrderRef
}

// GetOrderRefOk returns a tuple with the OrderRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetOrderRefOk() (*string, bool) {
	if o == nil || o.OrderRef == nil {
		return nil, false
	}
	return o.OrderRef, true
}

// HasOrderRef returns a boolean if a field has been set.
func (o *Order) HasOrderRef() bool {
	if o != nil && o.OrderRef != nil {
		return true
	}

	return false
}

// SetOrderRef gets a reference to the given string and assigns it to the OrderRef field.
func (o *Order) SetOrderRef(v string) {
	o.OrderRef = &v
}

func (o Order) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Acct != nil {
		toSerialize["acct"] = o.Acct
	}
	if o.Conid != nil {
		toSerialize["conid"] = o.Conid
	}
	if o.OrderDesc != nil {
		toSerialize["orderDesc"] = o.OrderDesc
	}
	if o.Description1 != nil {
		toSerialize["description1"] = o.Description1
	}
	if o.Ticker != nil {
		toSerialize["ticker"] = o.Ticker
	}
	if o.SecType != nil {
		toSerialize["secType"] = o.SecType
	}
	if o.ListingExchange != nil {
		toSerialize["listingExchange"] = o.ListingExchange
	}
	if o.RemainingQuantity != nil {
		toSerialize["remainingQuantity"] = o.RemainingQuantity
	}
	if o.FilledQuantity != nil {
		toSerialize["filledQuantity"] = o.FilledQuantity
	}
	if o.CompanyName != nil {
		toSerialize["companyName"] = o.CompanyName
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.OrigOrderType != nil {
		toSerialize["origOrderType"] = o.OrigOrderType
	}
	if o.Side != nil {
		toSerialize["side"] = o.Side
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.BgColor != nil {
		toSerialize["bgColor"] = o.BgColor
	}
	if o.FgColor != nil {
		toSerialize["fgColor"] = o.FgColor
	}
	if o.OrderId != nil {
		toSerialize["orderId"] = o.OrderId
	}
	if o.ParentId != nil {
		toSerialize["parentId"] = o.ParentId
	}
	if o.OrderRef != nil {
		toSerialize["order_ref"] = o.OrderRef
	}
	return json.Marshal(toSerialize)
}

type NullableOrder struct {
	value *Order
	isSet bool
}

func (v NullableOrder) Get() *Order {
	return v.value
}

func (v *NullableOrder) Set(val *Order) {
	v.value = val
	v.isSet = true
}

func (v NullableOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrder(val *Order) *NullableOrder {
	return &NullableOrder{value: val, isSet: true}
}

func (v NullableOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


